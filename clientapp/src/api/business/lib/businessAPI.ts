/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { BusinessAPIContext } from "./businessAPIContext";

class BusinessAPI extends BusinessAPIContext {
  /**
   * Initializes a new instance of the BusinessAPI class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, options?: Models.BusinessAPIOptions) {
    super(credentials, options);
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.LoginResponse>
   */
  login(options?: Models.BusinessAPILoginOptionalParams): Promise<Models.LoginResponse>;
  /**
   * @param callback The callback
   */
  login(callback: msRest.ServiceCallback<Models.LoginResponseDTORequestResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  login(options: Models.BusinessAPILoginOptionalParams, callback: msRest.ServiceCallback<Models.LoginResponseDTORequestResponse>): void;
  login(options?: Models.BusinessAPILoginOptionalParams | msRest.ServiceCallback<Models.LoginResponseDTORequestResponse>, callback?: msRest.ServiceCallback<Models.LoginResponseDTORequestResponse>): Promise<Models.LoginResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      loginOperationSpec,
      callback) as Promise<Models.LoginResponse>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.GetByIdResponse>
   */
  getById(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetByIdResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  getById(id: string, callback: msRest.ServiceCallback<Models.CommentDTORequestResponse>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getById(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CommentDTORequestResponse>): void;
  getById(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CommentDTORequestResponse>, callback?: msRest.ServiceCallback<Models.CommentDTORequestResponse>): Promise<Models.GetByIdResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getByIdOperationSpec,
      callback) as Promise<Models.GetByIdResponse>;
  }

  /**
   * @param idPost
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPostCommentsResponse>
   */
  getPostComments(idPost: string, options?: msRest.RequestOptionsBase): Promise<Models.GetPostCommentsResponse>;
  /**
   * @param idPost
   * @param callback The callback
   */
  getPostComments(idPost: string, callback: msRest.ServiceCallback<Models.Int32RequestResponse>): void;
  /**
   * @param idPost
   * @param options The optional parameters
   * @param callback The callback
   */
  getPostComments(idPost: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Int32RequestResponse>): void;
  getPostComments(idPost: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Int32RequestResponse>, callback?: msRest.ServiceCallback<Models.Int32RequestResponse>): Promise<Models.GetPostCommentsResponse> {
    return this.sendOperationRequest(
      {
        idPost,
        options
      },
      getPostCommentsOperationSpec,
      callback) as Promise<Models.GetPostCommentsResponse>;
  }

  /**
   * @param idPost
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCommentsForPostResponse>
   */
  getCommentsForPost(idPost: string, options?: msRest.RequestOptionsBase): Promise<Models.GetCommentsForPostResponse>;
  /**
   * @param idPost
   * @param callback The callback
   */
  getCommentsForPost(idPost: string, callback: msRest.ServiceCallback<Models.CommentDTOListRequestResponse>): void;
  /**
   * @param idPost
   * @param options The optional parameters
   * @param callback The callback
   */
  getCommentsForPost(idPost: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CommentDTOListRequestResponse>): void;
  getCommentsForPost(idPost: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CommentDTOListRequestResponse>, callback?: msRest.ServiceCallback<Models.CommentDTOListRequestResponse>): Promise<Models.GetCommentsForPostResponse> {
    return this.sendOperationRequest(
      {
        idPost,
        options
      },
      getCommentsForPostOperationSpec,
      callback) as Promise<Models.GetCommentsForPostResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.AddResponse>
   */
  add(options?: Models.BusinessAPIAddOptionalParams): Promise<Models.AddResponse>;
  /**
   * @param callback The callback
   */
  add(callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  add(options: Models.BusinessAPIAddOptionalParams, callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  add(options?: Models.BusinessAPIAddOptionalParams | msRest.ServiceCallback<Models.RequestResponse>, callback?: msRest.ServiceCallback<Models.RequestResponse>): Promise<Models.AddResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      addOperationSpec,
      callback) as Promise<Models.AddResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateResponse>
   */
  update(options?: Models.BusinessAPIUpdateOptionalParams): Promise<Models.UpdateResponse>;
  /**
   * @param callback The callback
   */
  update(callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  update(options: Models.BusinessAPIUpdateOptionalParams, callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  update(options?: Models.BusinessAPIUpdateOptionalParams | msRest.ServiceCallback<Models.RequestResponse>, callback?: msRest.ServiceCallback<Models.RequestResponse>): Promise<Models.UpdateResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.UpdateResponse>;
  }

  /**
   * @param id
   * @param idUser
   * @param idPost
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteMethodResponse>
   */
  deleteMethod(id: string, idUser: string, idPost: string, options?: msRest.RequestOptionsBase): Promise<Models.DeleteMethodResponse>;
  /**
   * @param id
   * @param idUser
   * @param idPost
   * @param callback The callback
   */
  deleteMethod(id: string, idUser: string, idPost: string, callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  /**
   * @param id
   * @param idUser
   * @param idPost
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(id: string, idUser: string, idPost: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  deleteMethod(id: string, idUser: string, idPost: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RequestResponse>, callback?: msRest.ServiceCallback<Models.RequestResponse>): Promise<Models.DeleteMethodResponse> {
    return this.sendOperationRequest(
      {
        id,
        idUser,
        idPost,
        options
      },
      deleteMethodOperationSpec,
      callback) as Promise<Models.DeleteMethodResponse>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.GetById1Response>
   */
  getById1(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetById1Response>;
  /**
   * @param id
   * @param callback The callback
   */
  getById1(id: string, callback: msRest.ServiceCallback<Models.EventDTORequestResponse>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getById1(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EventDTORequestResponse>): void;
  getById1(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EventDTORequestResponse>, callback?: msRest.ServiceCallback<Models.EventDTORequestResponse>): Promise<Models.GetById1Response> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getById1OperationSpec,
      callback) as Promise<Models.GetById1Response>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPageResponse>
   */
  getPage(options?: Models.BusinessAPIGetPageOptionalParams): Promise<Models.GetPageResponse>;
  /**
   * @param callback The callback
   */
  getPage(callback: msRest.ServiceCallback<Models.EventDTOPagedResponseRequestResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getPage(options: Models.BusinessAPIGetPageOptionalParams, callback: msRest.ServiceCallback<Models.EventDTOPagedResponseRequestResponse>): void;
  getPage(options?: Models.BusinessAPIGetPageOptionalParams | msRest.ServiceCallback<Models.EventDTOPagedResponseRequestResponse>, callback?: msRest.ServiceCallback<Models.EventDTOPagedResponseRequestResponse>): Promise<Models.GetPageResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getPageOperationSpec,
      callback) as Promise<Models.GetPageResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.Add1Response>
   */
  add1(options?: Models.BusinessAPIAdd1OptionalParams): Promise<Models.Add1Response>;
  /**
   * @param callback The callback
   */
  add1(callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  add1(options: Models.BusinessAPIAdd1OptionalParams, callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  add1(options?: Models.BusinessAPIAdd1OptionalParams | msRest.ServiceCallback<Models.RequestResponse>, callback?: msRest.ServiceCallback<Models.RequestResponse>): Promise<Models.Add1Response> {
    return this.sendOperationRequest(
      {
        options
      },
      add1OperationSpec,
      callback) as Promise<Models.Add1Response>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.Update1Response>
   */
  update1(options?: Models.BusinessAPIUpdate1OptionalParams): Promise<Models.Update1Response>;
  /**
   * @param callback The callback
   */
  update1(callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  update1(options: Models.BusinessAPIUpdate1OptionalParams, callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  update1(options?: Models.BusinessAPIUpdate1OptionalParams | msRest.ServiceCallback<Models.RequestResponse>, callback?: msRest.ServiceCallback<Models.RequestResponse>): Promise<Models.Update1Response> {
    return this.sendOperationRequest(
      {
        options
      },
      update1OperationSpec,
      callback) as Promise<Models.Update1Response>;
  }

  /**
   * @param id
   * @param idUser
   * @param [options] The optional parameters
   * @returns Promise<Models.Delete1Response>
   */
  delete1(id: string, idUser: string, options?: msRest.RequestOptionsBase): Promise<Models.Delete1Response>;
  /**
   * @param id
   * @param idUser
   * @param callback The callback
   */
  delete1(id: string, idUser: string, callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  /**
   * @param id
   * @param idUser
   * @param options The optional parameters
   * @param callback The callback
   */
  delete1(id: string, idUser: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  delete1(id: string, idUser: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RequestResponse>, callback?: msRest.ServiceCallback<Models.RequestResponse>): Promise<Models.Delete1Response> {
    return this.sendOperationRequest(
      {
        id,
        idUser,
        options
      },
      delete1OperationSpec,
      callback) as Promise<Models.Delete1Response>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.GetById2Response>
   */
  getById2(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetById2Response>;
  /**
   * @param id
   * @param callback The callback
   */
  getById2(id: string, callback: msRest.ServiceCallback<Models.FeedbackDTORequestResponse>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getById2(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FeedbackDTORequestResponse>): void;
  getById2(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FeedbackDTORequestResponse>, callback?: msRest.ServiceCallback<Models.FeedbackDTORequestResponse>): Promise<Models.GetById2Response> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getById2OperationSpec,
      callback) as Promise<Models.GetById2Response>;
  }

  /**
   * @param idUserInitiator
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPage1Response>
   */
  getPage1(idUserInitiator: string, options?: Models.BusinessAPIGetPage1OptionalParams): Promise<Models.GetPage1Response>;
  /**
   * @param idUserInitiator
   * @param callback The callback
   */
  getPage1(idUserInitiator: string, callback: msRest.ServiceCallback<Models.FeedbackDTOPagedResponseRequestResponse>): void;
  /**
   * @param idUserInitiator
   * @param options The optional parameters
   * @param callback The callback
   */
  getPage1(idUserInitiator: string, options: Models.BusinessAPIGetPage1OptionalParams, callback: msRest.ServiceCallback<Models.FeedbackDTOPagedResponseRequestResponse>): void;
  getPage1(idUserInitiator: string, options?: Models.BusinessAPIGetPage1OptionalParams | msRest.ServiceCallback<Models.FeedbackDTOPagedResponseRequestResponse>, callback?: msRest.ServiceCallback<Models.FeedbackDTOPagedResponseRequestResponse>): Promise<Models.GetPage1Response> {
    return this.sendOperationRequest(
      {
        idUserInitiator,
        options
      },
      getPage1OperationSpec,
      callback) as Promise<Models.GetPage1Response>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.Add2Response>
   */
  add2(options?: Models.BusinessAPIAdd2OptionalParams): Promise<Models.Add2Response>;
  /**
   * @param callback The callback
   */
  add2(callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  add2(options: Models.BusinessAPIAdd2OptionalParams, callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  add2(options?: Models.BusinessAPIAdd2OptionalParams | msRest.ServiceCallback<Models.RequestResponse>, callback?: msRest.ServiceCallback<Models.RequestResponse>): Promise<Models.Add2Response> {
    return this.sendOperationRequest(
      {
        options
      },
      add2OperationSpec,
      callback) as Promise<Models.Add2Response>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.Update2Response>
   */
  update2(options?: Models.BusinessAPIUpdate2OptionalParams): Promise<Models.Update2Response>;
  /**
   * @param callback The callback
   */
  update2(callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  update2(options: Models.BusinessAPIUpdate2OptionalParams, callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  update2(options?: Models.BusinessAPIUpdate2OptionalParams | msRest.ServiceCallback<Models.RequestResponse>, callback?: msRest.ServiceCallback<Models.RequestResponse>): Promise<Models.Update2Response> {
    return this.sendOperationRequest(
      {
        options
      },
      update2OperationSpec,
      callback) as Promise<Models.Update2Response>;
  }

  /**
   * @param id
   * @param idUser
   * @param [options] The optional parameters
   * @returns Promise<Models.Delete2Response>
   */
  delete2(id: string, idUser: string, options?: msRest.RequestOptionsBase): Promise<Models.Delete2Response>;
  /**
   * @param id
   * @param idUser
   * @param callback The callback
   */
  delete2(id: string, idUser: string, callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  /**
   * @param id
   * @param idUser
   * @param options The optional parameters
   * @param callback The callback
   */
  delete2(id: string, idUser: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  delete2(id: string, idUser: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RequestResponse>, callback?: msRest.ServiceCallback<Models.RequestResponse>): Promise<Models.Delete2Response> {
    return this.sendOperationRequest(
      {
        id,
        idUser,
        options
      },
      delete2OperationSpec,
      callback) as Promise<Models.Delete2Response>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.GetById3Response>
   */
  getById3(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetById3Response>;
  /**
   * @param id
   * @param callback The callback
   */
  getById3(id: string, callback: msRest.ServiceCallback<Models.LikeDTORequestResponse>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getById3(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LikeDTORequestResponse>): void;
  getById3(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LikeDTORequestResponse>, callback?: msRest.ServiceCallback<Models.LikeDTORequestResponse>): Promise<Models.GetById3Response> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getById3OperationSpec,
      callback) as Promise<Models.GetById3Response>;
  }

  /**
   * @param idPost
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPostLikesResponse>
   */
  getPostLikes(idPost: string, options?: msRest.RequestOptionsBase): Promise<Models.GetPostLikesResponse>;
  /**
   * @param idPost
   * @param callback The callback
   */
  getPostLikes(idPost: string, callback: msRest.ServiceCallback<Models.Int32RequestResponse>): void;
  /**
   * @param idPost
   * @param options The optional parameters
   * @param callback The callback
   */
  getPostLikes(idPost: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Int32RequestResponse>): void;
  getPostLikes(idPost: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Int32RequestResponse>, callback?: msRest.ServiceCallback<Models.Int32RequestResponse>): Promise<Models.GetPostLikesResponse> {
    return this.sendOperationRequest(
      {
        idPost,
        options
      },
      getPostLikesOperationSpec,
      callback) as Promise<Models.GetPostLikesResponse>;
  }

  /**
   * @param idPost
   * @param idUser
   * @param [options] The optional parameters
   * @returns Promise<Models.GetLikesForPostResponse>
   */
  getLikesForPost(idPost: string, idUser: string, options?: msRest.RequestOptionsBase): Promise<Models.GetLikesForPostResponse>;
  /**
   * @param idPost
   * @param idUser
   * @param callback The callback
   */
  getLikesForPost(idPost: string, idUser: string, callback: msRest.ServiceCallback<Models.LikeDTOListRequestResponse>): void;
  /**
   * @param idPost
   * @param idUser
   * @param options The optional parameters
   * @param callback The callback
   */
  getLikesForPost(idPost: string, idUser: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LikeDTOListRequestResponse>): void;
  getLikesForPost(idPost: string, idUser: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LikeDTOListRequestResponse>, callback?: msRest.ServiceCallback<Models.LikeDTOListRequestResponse>): Promise<Models.GetLikesForPostResponse> {
    return this.sendOperationRequest(
      {
        idPost,
        idUser,
        options
      },
      getLikesForPostOperationSpec,
      callback) as Promise<Models.GetLikesForPostResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.Add3Response>
   */
  add3(options?: Models.BusinessAPIAdd3OptionalParams): Promise<Models.Add3Response>;
  /**
   * @param callback The callback
   */
  add3(callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  add3(options: Models.BusinessAPIAdd3OptionalParams, callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  add3(options?: Models.BusinessAPIAdd3OptionalParams | msRest.ServiceCallback<Models.RequestResponse>, callback?: msRest.ServiceCallback<Models.RequestResponse>): Promise<Models.Add3Response> {
    return this.sendOperationRequest(
      {
        options
      },
      add3OperationSpec,
      callback) as Promise<Models.Add3Response>;
  }

  /**
   * @param id
   * @param idUser
   * @param idPost
   * @param [options] The optional parameters
   * @returns Promise<Models.Delete3Response>
   */
  delete3(id: string, idUser: string, idPost: string, options?: msRest.RequestOptionsBase): Promise<Models.Delete3Response>;
  /**
   * @param id
   * @param idUser
   * @param idPost
   * @param callback The callback
   */
  delete3(id: string, idUser: string, idPost: string, callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  /**
   * @param id
   * @param idUser
   * @param idPost
   * @param options The optional parameters
   * @param callback The callback
   */
  delete3(id: string, idUser: string, idPost: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  delete3(id: string, idUser: string, idPost: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RequestResponse>, callback?: msRest.ServiceCallback<Models.RequestResponse>): Promise<Models.Delete3Response> {
    return this.sendOperationRequest(
      {
        id,
        idUser,
        idPost,
        options
      },
      delete3OperationSpec,
      callback) as Promise<Models.Delete3Response>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.GetById4Response>
   */
  getById4(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetById4Response>;
  /**
   * @param id
   * @param callback The callback
   */
  getById4(id: string, callback: msRest.ServiceCallback<Models.PostDTORequestResponse>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getById4(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PostDTORequestResponse>): void;
  getById4(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PostDTORequestResponse>, callback?: msRest.ServiceCallback<Models.PostDTORequestResponse>): Promise<Models.GetById4Response> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getById4OperationSpec,
      callback) as Promise<Models.GetById4Response>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPage2Response>
   */
  getPage2(options?: Models.BusinessAPIGetPage2OptionalParams): Promise<Models.GetPage2Response>;
  /**
   * @param callback The callback
   */
  getPage2(callback: msRest.ServiceCallback<Models.PostDTOPagedResponseRequestResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getPage2(options: Models.BusinessAPIGetPage2OptionalParams, callback: msRest.ServiceCallback<Models.PostDTOPagedResponseRequestResponse>): void;
  getPage2(options?: Models.BusinessAPIGetPage2OptionalParams | msRest.ServiceCallback<Models.PostDTOPagedResponseRequestResponse>, callback?: msRest.ServiceCallback<Models.PostDTOPagedResponseRequestResponse>): Promise<Models.GetPage2Response> {
    return this.sendOperationRequest(
      {
        options
      },
      getPage2OperationSpec,
      callback) as Promise<Models.GetPage2Response>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.Add4Response>
   */
  add4(options?: Models.BusinessAPIAdd4OptionalParams): Promise<Models.Add4Response>;
  /**
   * @param callback The callback
   */
  add4(callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  add4(options: Models.BusinessAPIAdd4OptionalParams, callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  add4(options?: Models.BusinessAPIAdd4OptionalParams | msRest.ServiceCallback<Models.RequestResponse>, callback?: msRest.ServiceCallback<Models.RequestResponse>): Promise<Models.Add4Response> {
    return this.sendOperationRequest(
      {
        options
      },
      add4OperationSpec,
      callback) as Promise<Models.Add4Response>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.Update3Response>
   */
  update3(options?: Models.BusinessAPIUpdate3OptionalParams): Promise<Models.Update3Response>;
  /**
   * @param callback The callback
   */
  update3(callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  update3(options: Models.BusinessAPIUpdate3OptionalParams, callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  update3(options?: Models.BusinessAPIUpdate3OptionalParams | msRest.ServiceCallback<Models.RequestResponse>, callback?: msRest.ServiceCallback<Models.RequestResponse>): Promise<Models.Update3Response> {
    return this.sendOperationRequest(
      {
        options
      },
      update3OperationSpec,
      callback) as Promise<Models.Update3Response>;
  }

  /**
   * @param id
   * @param idUser
   * @param [options] The optional parameters
   * @returns Promise<Models.Delete4Response>
   */
  delete4(id: string, idUser: string, options?: msRest.RequestOptionsBase): Promise<Models.Delete4Response>;
  /**
   * @param id
   * @param idUser
   * @param callback The callback
   */
  delete4(id: string, idUser: string, callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  /**
   * @param id
   * @param idUser
   * @param options The optional parameters
   * @param callback The callback
   */
  delete4(id: string, idUser: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  delete4(id: string, idUser: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RequestResponse>, callback?: msRest.ServiceCallback<Models.RequestResponse>): Promise<Models.Delete4Response> {
    return this.sendOperationRequest(
      {
        id,
        idUser,
        options
      },
      delete4OperationSpec,
      callback) as Promise<Models.Delete4Response>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.GetById5Response>
   */
  getById5(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetById5Response>;
  /**
   * @param id
   * @param callback The callback
   */
  getById5(id: string, callback: msRest.ServiceCallback<Models.UserDTORequestResponse>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getById5(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UserDTORequestResponse>): void;
  getById5(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.UserDTORequestResponse>, callback?: msRest.ServiceCallback<Models.UserDTORequestResponse>): Promise<Models.GetById5Response> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getById5OperationSpec,
      callback) as Promise<Models.GetById5Response>;
  }

  /**
   * @param email
   * @param [options] The optional parameters
   * @returns Promise<Models.GetByEmailResponse>
   */
  getByEmail(email: string, options?: msRest.RequestOptionsBase): Promise<Models.GetByEmailResponse>;
  /**
   * @param email
   * @param callback The callback
   */
  getByEmail(email: string, callback: msRest.ServiceCallback<Models.UserRequestResponse>): void;
  /**
   * @param email
   * @param options The optional parameters
   * @param callback The callback
   */
  getByEmail(email: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UserRequestResponse>): void;
  getByEmail(email: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.UserRequestResponse>, callback?: msRest.ServiceCallback<Models.UserRequestResponse>): Promise<Models.GetByEmailResponse> {
    return this.sendOperationRequest(
      {
        email,
        options
      },
      getByEmailOperationSpec,
      callback) as Promise<Models.GetByEmailResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPage3Response>
   */
  getPage3(options?: Models.BusinessAPIGetPage3OptionalParams): Promise<Models.GetPage3Response>;
  /**
   * @param callback The callback
   */
  getPage3(callback: msRest.ServiceCallback<Models.UserDTOPagedResponseRequestResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getPage3(options: Models.BusinessAPIGetPage3OptionalParams, callback: msRest.ServiceCallback<Models.UserDTOPagedResponseRequestResponse>): void;
  getPage3(options?: Models.BusinessAPIGetPage3OptionalParams | msRest.ServiceCallback<Models.UserDTOPagedResponseRequestResponse>, callback?: msRest.ServiceCallback<Models.UserDTOPagedResponseRequestResponse>): Promise<Models.GetPage3Response> {
    return this.sendOperationRequest(
      {
        options
      },
      getPage3OperationSpec,
      callback) as Promise<Models.GetPage3Response>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.Add5Response>
   */
  add5(options?: Models.BusinessAPIAdd5OptionalParams): Promise<Models.Add5Response>;
  /**
   * @param callback The callback
   */
  add5(callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  add5(options: Models.BusinessAPIAdd5OptionalParams, callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  add5(options?: Models.BusinessAPIAdd5OptionalParams | msRest.ServiceCallback<Models.RequestResponse>, callback?: msRest.ServiceCallback<Models.RequestResponse>): Promise<Models.Add5Response> {
    return this.sendOperationRequest(
      {
        options
      },
      add5OperationSpec,
      callback) as Promise<Models.Add5Response>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.Update4Response>
   */
  update4(options?: Models.BusinessAPIUpdate4OptionalParams): Promise<Models.Update4Response>;
  /**
   * @param callback The callback
   */
  update4(callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  update4(options: Models.BusinessAPIUpdate4OptionalParams, callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  update4(options?: Models.BusinessAPIUpdate4OptionalParams | msRest.ServiceCallback<Models.RequestResponse>, callback?: msRest.ServiceCallback<Models.RequestResponse>): Promise<Models.Update4Response> {
    return this.sendOperationRequest(
      {
        options
      },
      update4OperationSpec,
      callback) as Promise<Models.Update4Response>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.Delete5Response>
   */
  delete5(id: string, options?: msRest.RequestOptionsBase): Promise<Models.Delete5Response>;
  /**
   * @param id
   * @param callback The callback
   */
  delete5(id: string, callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  delete5(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  delete5(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RequestResponse>, callback?: msRest.ServiceCallback<Models.RequestResponse>): Promise<Models.Delete5Response> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      delete5OperationSpec,
      callback) as Promise<Models.Delete5Response>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPage4Response>
   */
  getPage4(options?: Models.BusinessAPIGetPage4OptionalParams): Promise<Models.GetPage4Response>;
  /**
   * @param callback The callback
   */
  getPage4(callback: msRest.ServiceCallback<Models.UserFileDTOPagedResponseRequestResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getPage4(options: Models.BusinessAPIGetPage4OptionalParams, callback: msRest.ServiceCallback<Models.UserFileDTOPagedResponseRequestResponse>): void;
  getPage4(options?: Models.BusinessAPIGetPage4OptionalParams | msRest.ServiceCallback<Models.UserFileDTOPagedResponseRequestResponse>, callback?: msRest.ServiceCallback<Models.UserFileDTOPagedResponseRequestResponse>): Promise<Models.GetPage4Response> {
    return this.sendOperationRequest(
      {
        options
      },
      getPage4OperationSpec,
      callback) as Promise<Models.GetPage4Response>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.Add6Response>
   */
  add6(options?: Models.BusinessAPIAdd6OptionalParams): Promise<Models.Add6Response>;
  /**
   * @param callback The callback
   */
  add6(callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  add6(options: Models.BusinessAPIAdd6OptionalParams, callback: msRest.ServiceCallback<Models.RequestResponse>): void;
  add6(options?: Models.BusinessAPIAdd6OptionalParams | msRest.ServiceCallback<Models.RequestResponse>, callback?: msRest.ServiceCallback<Models.RequestResponse>): Promise<Models.Add6Response> {
    return this.sendOperationRequest(
      {
        options
      },
      add6OperationSpec,
      callback) as Promise<Models.Add6Response>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.DownloadResponse>
   */
  download(id: string, options?: msRest.RequestOptionsBase): Promise<Models.DownloadResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  download(id: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  download(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  download(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.DownloadResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      downloadOperationSpec,
      callback) as Promise<Models.DownloadResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const loginOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/Authorization/Login",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.LoginDTO
  },
  responses: {
    200: {
      bodyMapper: Mappers.LoginResponseDTORequestResponse
    },
    default: {}
  },
  serializer
};

const getByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/Comment/GetById/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CommentDTORequestResponse
    },
    default: {}
  },
  serializer
};

const getPostCommentsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/Comment/GetPostComments/count-Comments/{idPost}",
  urlParameters: [
    Parameters.idPost
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Int32RequestResponse
    },
    default: {}
  },
  serializer
};

const getCommentsForPostOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/Comment/GetCommentsForPost/Comments/{idPost}",
  urlParameters: [
    Parameters.idPost
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CommentDTOListRequestResponse
    },
    default: {}
  },
  serializer
};

const addOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/Comment/Add",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.CommentAddDTO
  },
  responses: {
    200: {
      bodyMapper: Mappers.RequestResponse
    },
    default: {}
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/Comment/Update",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.CommentUpdateDTO
  },
  responses: {
    200: {
      bodyMapper: Mappers.RequestResponse
    },
    default: {}
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/Comment/Delete/{id}/{idUser}/{idPost}",
  urlParameters: [
    Parameters.id,
    Parameters.idUser,
    Parameters.idPost
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RequestResponse
    },
    default: {}
  },
  serializer
};

const getById1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/Event/GetById/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventDTORequestResponse
    },
    default: {}
  },
  serializer
};

const getPageOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/Event/GetPage",
  queryParameters: [
    Parameters.search,
    Parameters.page,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventDTOPagedResponseRequestResponse
    },
    default: {}
  },
  serializer
};

const add1OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/Event/Add",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.EventAddDTO
  },
  responses: {
    200: {
      bodyMapper: Mappers.RequestResponse
    },
    default: {}
  },
  serializer
};

const update1OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/Event/Update",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.EventUpdateDTO
  },
  responses: {
    200: {
      bodyMapper: Mappers.RequestResponse
    },
    default: {}
  },
  serializer
};

const delete1OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/Event/Delete/{id}/{idUser}",
  urlParameters: [
    Parameters.id,
    Parameters.idUser
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RequestResponse
    },
    default: {}
  },
  serializer
};

const getById2OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/Feedback/GetById/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FeedbackDTORequestResponse
    },
    default: {}
  },
  serializer
};

const getPage1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/Feedback/GetPage/{idUserInitiator}",
  urlParameters: [
    Parameters.idUserInitiator
  ],
  queryParameters: [
    Parameters.search,
    Parameters.page,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FeedbackDTOPagedResponseRequestResponse
    },
    default: {}
  },
  serializer
};

const add2OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/Feedback/Add",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.FeedbackAddDTO
  },
  responses: {
    200: {
      bodyMapper: Mappers.RequestResponse
    },
    default: {}
  },
  serializer
};

const update2OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/Feedback/Update",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.FeedbackUpdateDTO
  },
  responses: {
    200: {
      bodyMapper: Mappers.RequestResponse
    },
    default: {}
  },
  serializer
};

const delete2OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/Feedback/Delete/{id}/{idUser}",
  urlParameters: [
    Parameters.id,
    Parameters.idUser
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RequestResponse
    },
    default: {}
  },
  serializer
};

const getById3OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/Like/GetById/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LikeDTORequestResponse
    },
    default: {}
  },
  serializer
};

const getPostLikesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/Like/GetPostLikes/count-likes/{idPost}",
  urlParameters: [
    Parameters.idPost
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Int32RequestResponse
    },
    default: {}
  },
  serializer
};

const getLikesForPostOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/Like/GetLikesForPost/likes/{idPost}/{idUser}",
  urlParameters: [
    Parameters.idPost,
    Parameters.idUser
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LikeDTOListRequestResponse
    },
    default: {}
  },
  serializer
};

const add3OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/Like/Add",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.LikeAddDTO
  },
  responses: {
    200: {
      bodyMapper: Mappers.RequestResponse
    },
    default: {}
  },
  serializer
};

const delete3OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/Like/Delete/{id}/{idUser}/{idPost}",
  urlParameters: [
    Parameters.id,
    Parameters.idUser,
    Parameters.idPost
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RequestResponse
    },
    default: {}
  },
  serializer
};

const getById4OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/Post/GetById/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PostDTORequestResponse
    },
    default: {}
  },
  serializer
};

const getPage2OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/Post/GetPage",
  queryParameters: [
    Parameters.search,
    Parameters.page,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PostDTOPagedResponseRequestResponse
    },
    default: {}
  },
  serializer
};

const add4OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/Post/Add",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.PostAddDTO
  },
  responses: {
    200: {
      bodyMapper: Mappers.RequestResponse
    },
    default: {}
  },
  serializer
};

const update3OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/Post/Update",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.PostUpdateDTO
  },
  responses: {
    200: {
      bodyMapper: Mappers.RequestResponse
    },
    default: {}
  },
  serializer
};

const delete4OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/Post/Delete/{id}/{idUser}",
  urlParameters: [
    Parameters.id,
    Parameters.idUser
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RequestResponse
    },
    default: {}
  },
  serializer
};

const getById5OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/User/GetById/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UserDTORequestResponse
    },
    default: {}
  },
  serializer
};

const getByEmailOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/User/GetByEmail/mail/{email}",
  urlParameters: [
    Parameters.email
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UserRequestResponse
    },
    default: {}
  },
  serializer
};

const getPage3OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/User/GetPage",
  queryParameters: [
    Parameters.search,
    Parameters.page,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UserDTOPagedResponseRequestResponse
    },
    default: {}
  },
  serializer
};

const add5OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/User/Add",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.UserAddDTO
  },
  responses: {
    200: {
      bodyMapper: Mappers.RequestResponse
    },
    default: {}
  },
  serializer
};

const update4OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/User/Update",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.UserUpdateDTO
  },
  responses: {
    200: {
      bodyMapper: Mappers.RequestResponse
    },
    default: {}
  },
  serializer
};

const delete5OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/User/Delete/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RequestResponse
    },
    default: {}
  },
  serializer
};

const getPage4OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/UserFile/GetPage",
  queryParameters: [
    Parameters.search,
    Parameters.page,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UserFileDTOPagedResponseRequestResponse
    },
    default: {}
  },
  serializer
};

const add6OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/UserFile/Add",
  formDataParameters: [
    Parameters.file,
    Parameters.description
  ],
  contentType: "multipart/form-data",
  responses: {
    200: {
      bodyMapper: Mappers.RequestResponse
    },
    default: {}
  },
  serializer
};

const downloadOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/UserFile/Download/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {}
  },
  serializer
};

export {
  BusinessAPI,
  BusinessAPIContext,
  Models as BusinessAPIModels,
  Mappers as BusinessAPIMappers
};
