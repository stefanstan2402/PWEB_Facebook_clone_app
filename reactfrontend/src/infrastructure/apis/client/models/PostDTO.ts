/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CommentDTO } from './CommentDTO';
import {
    CommentDTOFromJSON,
    CommentDTOFromJSONTyped,
    CommentDTOToJSON,
} from './CommentDTO';
import type { LikeDTO } from './LikeDTO';
import {
    LikeDTOFromJSON,
    LikeDTOFromJSONTyped,
    LikeDTOToJSON,
} from './LikeDTO';
import type { UserDTO } from './UserDTO';
import {
    UserDTOFromJSON,
    UserDTOFromJSONTyped,
    UserDTOToJSON,
} from './UserDTO';

/**
 * 
 * @export
 * @interface PostDTO
 */
export interface PostDTO {
    /**
     * 
     * @type {string}
     * @memberof PostDTO
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof PostDTO
     */
    content?: string | null;
    /**
     * 
     * @type {UserDTO}
     * @memberof PostDTO
     */
    user?: UserDTO;
    /**
     * 
     * @type {Array<CommentDTO>}
     * @memberof PostDTO
     */
    comments?: Array<CommentDTO> | null;
    /**
     * 
     * @type {Array<LikeDTO>}
     * @memberof PostDTO
     */
    likes?: Array<LikeDTO> | null;
}

/**
 * Check if a given object implements the PostDTO interface.
 */
export function instanceOfPostDTO(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PostDTOFromJSON(json: any): PostDTO {
    return PostDTOFromJSONTyped(json, false);
}

export function PostDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): PostDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'content': !exists(json, 'content') ? undefined : json['content'],
        'user': !exists(json, 'user') ? undefined : UserDTOFromJSON(json['user']),
        'comments': !exists(json, 'comments') ? undefined : (json['comments'] === null ? null : (json['comments'] as Array<any>).map(CommentDTOFromJSON)),
        'likes': !exists(json, 'likes') ? undefined : (json['likes'] === null ? null : (json['likes'] as Array<any>).map(LikeDTOFromJSON)),
    };
}

export function PostDTOToJSON(value?: PostDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'content': value.content,
        'user': UserDTOToJSON(value.user),
        'comments': value.comments === undefined ? undefined : (value.comments === null ? null : (value.comments as Array<any>).map(CommentDTOToJSON)),
        'likes': value.likes === undefined ? undefined : (value.likes === null ? null : (value.likes as Array<any>).map(LikeDTOToJSON)),
    };
}

