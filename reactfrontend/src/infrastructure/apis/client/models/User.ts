/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Comment } from './Comment';
import {
    CommentFromJSON,
    CommentFromJSONTyped,
    CommentToJSON,
} from './Comment';
import type { Event } from './Event';
import {
    EventFromJSON,
    EventFromJSONTyped,
    EventToJSON,
} from './Event';
import type { FeedBack } from './FeedBack';
import {
    FeedBackFromJSON,
    FeedBackFromJSONTyped,
    FeedBackToJSON,
} from './FeedBack';
import type { Like } from './Like';
import {
    LikeFromJSON,
    LikeFromJSONTyped,
    LikeToJSON,
} from './Like';
import type { Post } from './Post';
import {
    PostFromJSON,
    PostFromJSONTyped,
    PostToJSON,
} from './Post';
import type { UserFile } from './UserFile';
import {
    UserFileFromJSON,
    UserFileFromJSONTyped,
    UserFileToJSON,
} from './UserFile';
import type { UserRoleEnum } from './UserRoleEnum';
import {
    UserRoleEnumFromJSON,
    UserRoleEnumFromJSONTyped,
    UserRoleEnumToJSON,
} from './UserRoleEnum';

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    updatedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    password?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    phoneNumber?: string | null;
    /**
     * 
     * @type {UserRoleEnum}
     * @memberof User
     */
    role?: UserRoleEnum;
    /**
     * 
     * @type {Array<Post>}
     * @memberof User
     */
    posts?: Array<Post> | null;
    /**
     * 
     * @type {Array<Like>}
     * @memberof User
     */
    likes?: Array<Like> | null;
    /**
     * 
     * @type {Array<Comment>}
     * @memberof User
     */
    comments?: Array<Comment> | null;
    /**
     * 
     * @type {Array<Event>}
     * @memberof User
     */
    events?: Array<Event> | null;
    /**
     * 
     * @type {Array<UserFile>}
     * @memberof User
     */
    userFiles?: Array<UserFile> | null;
    /**
     * 
     * @type {Array<FeedBack>}
     * @memberof User
     */
    feedbacks?: Array<FeedBack> | null;
}

/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'password': !exists(json, 'password') ? undefined : json['password'],
        'phoneNumber': !exists(json, 'phoneNumber') ? undefined : json['phoneNumber'],
        'role': !exists(json, 'role') ? undefined : UserRoleEnumFromJSON(json['role']),
        'posts': !exists(json, 'posts') ? undefined : (json['posts'] === null ? null : (json['posts'] as Array<any>).map(PostFromJSON)),
        'likes': !exists(json, 'likes') ? undefined : (json['likes'] === null ? null : (json['likes'] as Array<any>).map(LikeFromJSON)),
        'comments': !exists(json, 'comments') ? undefined : (json['comments'] === null ? null : (json['comments'] as Array<any>).map(CommentFromJSON)),
        'events': !exists(json, 'events') ? undefined : (json['events'] === null ? null : (json['events'] as Array<any>).map(EventFromJSON)),
        'userFiles': !exists(json, 'userFiles') ? undefined : (json['userFiles'] === null ? null : (json['userFiles'] as Array<any>).map(UserFileFromJSON)),
        'feedbacks': !exists(json, 'feedbacks') ? undefined : (json['feedbacks'] === null ? null : (json['feedbacks'] as Array<any>).map(FeedBackFromJSON)),
    };
}

export function UserToJSON(value?: User | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'name': value.name,
        'email': value.email,
        'password': value.password,
        'phoneNumber': value.phoneNumber,
        'role': UserRoleEnumToJSON(value.role),
        'posts': value.posts === undefined ? undefined : (value.posts === null ? null : (value.posts as Array<any>).map(PostToJSON)),
        'likes': value.likes === undefined ? undefined : (value.likes === null ? null : (value.likes as Array<any>).map(LikeToJSON)),
        'comments': value.comments === undefined ? undefined : (value.comments === null ? null : (value.comments as Array<any>).map(CommentToJSON)),
        'events': value.events === undefined ? undefined : (value.events === null ? null : (value.events as Array<any>).map(EventToJSON)),
        'userFiles': value.userFiles === undefined ? undefined : (value.userFiles === null ? null : (value.userFiles as Array<any>).map(UserFileToJSON)),
        'feedbacks': value.feedbacks === undefined ? undefined : (value.feedbacks === null ? null : (value.feedbacks as Array<any>).map(FeedBackToJSON)),
    };
}

