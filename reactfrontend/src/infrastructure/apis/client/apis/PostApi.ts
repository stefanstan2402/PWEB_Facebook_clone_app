/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PostAddDTO,
  PostDTOPagedResponseRequestResponse,
  PostDTORequestResponse,
  PostUpdateDTO,
  RequestResponse,
} from '../models';
import {
    PostAddDTOFromJSON,
    PostAddDTOToJSON,
    PostDTOPagedResponseRequestResponseFromJSON,
    PostDTOPagedResponseRequestResponseToJSON,
    PostDTORequestResponseFromJSON,
    PostDTORequestResponseToJSON,
    PostUpdateDTOFromJSON,
    PostUpdateDTOToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models';

export interface ApiPostAddPostRequest {
    postAddDTO?: PostAddDTO;
}

export interface ApiPostDeleteIdIdUserDeleteRequest {
    id: string;
    idUser: string;
}

export interface ApiPostGetByIdIdGetRequest {
    id: string;
}

export interface ApiPostGetPageGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiPostUpdatePutRequest {
    postUpdateDTO?: PostUpdateDTO;
}

/**
 * 
 */
export class PostApi extends runtime.BaseAPI {

    /**
     */
    async apiPostAddPostRaw(requestParameters: ApiPostAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Post/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAddDTOToJSON(requestParameters.postAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiPostAddPost(requestParameters: ApiPostAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiPostAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPostDeleteIdIdUserDeleteRaw(requestParameters: ApiPostDeleteIdIdUserDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiPostDeleteIdIdUserDelete.');
        }

        if (requestParameters.idUser === null || requestParameters.idUser === undefined) {
            throw new runtime.RequiredError('idUser','Required parameter requestParameters.idUser was null or undefined when calling apiPostDeleteIdIdUserDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Post/Delete/{id}/{idUser}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"idUser"}}`, encodeURIComponent(String(requestParameters.idUser))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiPostDeleteIdIdUserDelete(requestParameters: ApiPostDeleteIdIdUserDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiPostDeleteIdIdUserDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPostGetByIdIdGetRaw(requestParameters: ApiPostGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostDTORequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiPostGetByIdIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Post/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiPostGetByIdIdGet(requestParameters: ApiPostGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostDTORequestResponse> {
        const response = await this.apiPostGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPostGetPageGetRaw(requestParameters: ApiPostGetPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Post/GetPage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiPostGetPageGet(requestParameters: ApiPostGetPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostDTOPagedResponseRequestResponse> {
        const response = await this.apiPostGetPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPostUpdatePutRaw(requestParameters: ApiPostUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Post/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostUpdateDTOToJSON(requestParameters.postUpdateDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiPostUpdatePut(requestParameters: ApiPostUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiPostUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
