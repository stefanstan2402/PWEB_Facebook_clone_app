/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EventAddDTO,
  EventDTOPagedResponseRequestResponse,
  EventDTORequestResponse,
  EventUpdateDTO,
  RequestResponse,
} from '../models';
import {
    EventAddDTOFromJSON,
    EventAddDTOToJSON,
    EventDTOPagedResponseRequestResponseFromJSON,
    EventDTOPagedResponseRequestResponseToJSON,
    EventDTORequestResponseFromJSON,
    EventDTORequestResponseToJSON,
    EventUpdateDTOFromJSON,
    EventUpdateDTOToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models';

export interface ApiEventAddPostRequest {
    eventAddDTO?: EventAddDTO;
}

export interface ApiEventDeleteIdIdUserDeleteRequest {
    id: string;
    idUser: string;
}

export interface ApiEventGetByIdIdGetRequest {
    id: string;
}

export interface ApiEventGetPageGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiEventUpdatePutRequest {
    eventUpdateDTO?: EventUpdateDTO;
}

/**
 * 
 */
export class EventApi extends runtime.BaseAPI {

    /**
     */
    async apiEventAddPostRaw(requestParameters: ApiEventAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Event/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EventAddDTOToJSON(requestParameters.eventAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiEventAddPost(requestParameters: ApiEventAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiEventAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiEventDeleteIdIdUserDeleteRaw(requestParameters: ApiEventDeleteIdIdUserDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiEventDeleteIdIdUserDelete.');
        }

        if (requestParameters.idUser === null || requestParameters.idUser === undefined) {
            throw new runtime.RequiredError('idUser','Required parameter requestParameters.idUser was null or undefined when calling apiEventDeleteIdIdUserDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Event/Delete/{id}/{idUser}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"idUser"}}`, encodeURIComponent(String(requestParameters.idUser))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiEventDeleteIdIdUserDelete(requestParameters: ApiEventDeleteIdIdUserDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiEventDeleteIdIdUserDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiEventGetByIdIdGetRaw(requestParameters: ApiEventGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventDTORequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiEventGetByIdIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Event/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiEventGetByIdIdGet(requestParameters: ApiEventGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventDTORequestResponse> {
        const response = await this.apiEventGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiEventGetPageGetRaw(requestParameters: ApiEventGetPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Event/GetPage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiEventGetPageGet(requestParameters: ApiEventGetPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventDTOPagedResponseRequestResponse> {
        const response = await this.apiEventGetPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiEventUpdatePutRaw(requestParameters: ApiEventUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Event/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EventUpdateDTOToJSON(requestParameters.eventUpdateDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiEventUpdatePut(requestParameters: ApiEventUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiEventUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
